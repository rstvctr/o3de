/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#define MATERIALPIPELINE_SHADER_HAS_GEOMETRIC_PIXEL_STAGE 1

//////////////////////////////////////////////////////////////////////////////////////////////////

#include MATERIAL_TYPE_AZSLI_FILE_PATH

//////////////////////////////////////////////////////////////////////////////////////////////////

#if MULTIVIEW
VsOutput VertexShader(VsInput IN, uint viewIndex : SV_ViewID)
#else
VsOutput VertexShader(VsInput IN)
#endif
{
#if MULTIVIEW
    g_viewIndex = viewIndex;
#endif
    VsOutput OUT = EvaluateVertexGeometry(IN);
    return OUT;
}

struct PsOutput
{
    precise float m_depth : SV_Depth;
};

#if MULTIVIEW
PsOutput PixelShader(VsOutput IN, bool isFrontFace : SV_IsFrontFace, uint viewIndex : SV_ViewID)
#else
PsOutput PixelShader(VsOutput IN, bool isFrontFace : SV_IsFrontFace)
#endif
{
#if MULTIVIEW
    g_viewIndex = viewIndex;
#endif
    PixelGeometryData geoData = EvaluatePixelGeometry(IN, isFrontFace);

    // Pixel clipping can be done here
    EvaluateSurface(IN, geoData);

    PsOutput OUT;
    OUT.m_depth = IN.position.z;

    return OUT;
}
