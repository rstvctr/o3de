/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include <Atom/Features/PostProcessing/FullscreenVertexUtil.azsli>
#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/RPI/Math.azsli>
#include "ReflectionScreenSpaceBlurCommon.azsli"

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_input;
    float m_invOutputScale;
}

#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

struct VSInput
{
    uint m_vertexID : SV_VertexID;
};

struct VSOutput
{
    float4 m_position : SV_Position;
};

// Generates a fullscreen triangle from pipeline provided vertex id 
VSOutput MainVS(VSInput input)
{
    VSOutput OUT;

    float4 posTex = GetVertexPositionAndTexCoords(input.m_vertexID);
    
    OUT.m_position = float4(posTex.x, posTex.y, 0.0, 1.0);

    return OUT;
}

// Pixel Shader
struct PSOutput
{    
    float4 m_color  : SV_Target0;
};

PSOutput MainPS(VSOutput IN)
{
    // vertical blur uses coordinates from the mip0 input image
    uint2 halfResCoords = IN.m_position.xy * PassSrg::m_invOutputScale;
    float4 result = GaussianFilter(halfResCoords, TexelOffsetsV, PassSrg::m_input);

    PSOutput OUT;
    OUT.m_color = result;
    return OUT;
}
