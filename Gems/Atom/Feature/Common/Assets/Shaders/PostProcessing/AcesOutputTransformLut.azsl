/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/SrgSemantics.azsli>

#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
#include <Atom/Features/PostProcessing/PostProcessUtil.azsli>
#include <Atom/Features/PostProcessing/Aces.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
#if MULTIVIEW
    Texture2DArray<float4> m_color;
#else
    Texture2D<float4> m_color;
#endif
    Texture3D<float4> m_lut;
    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
    float m_shaperBias;
    float m_shaperScale;
}

#if MULTIVIEW
PSOutput MainPS(VSOutput IN, uint viewIndex : SV_ViewID)
#else
PSOutput MainPS(VSOutput IN)
#endif
{
    PSOutput OUT;

    float2 uvCoord = float2(IN.m_texCoord.x, IN.m_texCoord.y);
#if MULTIVIEW
    float4 acescg = PassSrg::m_color.Sample(PassSrg::LinearSampler, float3(uvCoord, viewIndex));
#else
    float4 acescg = PassSrg::m_color.Sample(PassSrg::LinearSampler, uvCoord);
#endif
    float3 color = mul(XYZToSRGBMat, mul(D60ToD65Cat, mul(AP1ToXYZMat, acescg.rgb)));
    float3 lutCoordinate = log(color.rgb)/log(2.0) * PassSrg::m_shaperScale + PassSrg::m_shaperBias;

    OUT.m_color = PassSrg::m_lut.Sample(PassSrg::LinearSampler, lutCoordinate);
    OUT.m_color.a = 1.0f;

    return OUT;
}
