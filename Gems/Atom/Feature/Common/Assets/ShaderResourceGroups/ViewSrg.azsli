/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#ifndef AZ_COLLECTING_PARTIAL_SRGS
#error Do not include this file directly. Include the main .srgi file instead.
#endif

#define VIEWSRG_VIEWPROJECTIONMATRIX ViewSrg::m_viewProjectionMatrix
#define VIEWSRG_VIEWMATRIX ViewSrg::m_viewMatrix
#define VIEWSRG_VIEWMATRIXINVERSE ViewSrg::m_viewMatrixInverse
#define VIEWSRG_PROJECTIONMATRIX ViewSrg::m_projectionMatrix
#define VIEWSRG_PROJECTIONMATRIXINVERSE ViewSrg::m_projectionMatrixInverse
#define VIEWSRG_VIEWPROJECTIONINVERSEMATRIX ViewSrg::m_viewProjectionInverseMatrix
#define VIEWSRG_VIEWPROJECTIONPREVMATRIX ViewSrg::m_viewProjectionPrevMatrix
#define VIEWSRG_WORLDPOSITION ViewSrg::m_worldPosition
#define VIEWSRG_LINEARIZEDEPTHCONSTANTS m_linearizeDepthConstants
#define VIEWSRG_UNPROJECTIONCONSTANTS m_unprojectionConstants

partial ShaderResourceGroup ViewSrg
{
    row_major float4x4 m_viewProjectionMatrix;          // World -> Projection
    row_major float4x4 m_viewMatrix;                    // World -> View
    row_major float4x4 m_viewMatrixInverse;             // View -> World
    row_major float4x4 m_projectionMatrix;              // View -> Projection
    row_major float4x4 m_projectionMatrixInverse;       // Projection -> View
    row_major float4x4 m_viewProjectionInverseMatrix;   // Projection -> World

    // view projection matrix of last frame
    row_major float4x4 m_viewProjectionPrevMatrix;

    float3 m_worldPosition;

    // Constants to help calculate linear depth in an optimized manner
    float4 m_linearizeDepthConstants;

    // Constants used to unproject depth values and reconstruct the view-space position (Z-forward & Y-up)
    // See the GetViewSpacePosition( ) function below
    float4 m_unprojectionConstants;

    // Debug members...

    // Rendering options related to shader debugging
    uint m_renderDebugOptions;

    // Specifies what should be output to the view (i.e. normals, lighting, albedo, etc.)
    uint m_renderDebugViewMode;
    
    float GetNearZ()
    {
        return VIEWSRG_LINEARIZEDEPTHCONSTANTS.x;
    }

    float GetFarZ()
    {
        return VIEWSRG_LINEARIZEDEPTHCONSTANTS.y;
    }

    float GetFarZTimesNearZ()
    {
        return VIEWSRG_LINEARIZEDEPTHCONSTANTS.z;
    }

    float GetFarZMinusNearZ()
    {
        return VIEWSRG_LINEARIZEDEPTHCONSTANTS.w;
    }

    // Uses linearDepth value at screenUV to reconstruct view-space position (Z-forward & Y-up)
    float3 GetViewSpacePosition(float2 screenUV, float linearDepth)
    {
        float2 screenRay = (screenUV * VIEWSRG_UNPROJECTIONCONSTANTS.xy + VIEWSRG_UNPROJECTIONCONSTANTS.zw);
        return float3(screenRay * linearDepth, linearDepth);
    }
}

#include <Atom/Feature/Common/Assets/ShaderResourceGroups/Decals/ViewSrg.azsli>
#include <Atom/Feature/Common/Assets/ShaderResourceGroups/CoreLights/ViewSrg.azsli>
#include <Atom/Feature/Common/Assets/ShaderResourceGroups/PostProcessing/ViewSrg.azsli>
